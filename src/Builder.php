<?php declare(strict_types=1);

namespace BuildQL\Database\Query;

use mysqli;
use BuildQL\Database\Query\Exception\BuilderException;
use BuildQL\Database\Query\Traits\QueryExecute;
use BuildQL\Database\Query\Traits\QueryConversion;

class Builder{
    use QueryConversion, QueryExecute;

    /**
     *  Database name that are being used in SQL command
     */
    protected ?string $database;

    /**
     *  Table name
     */
    protected string $table;

    /**
     *  Raw Table name
     */
    protected string $rawTable;

    /**
     *  Mysqli connection object
     */
    protected mysqli $conn;

    /**
     *  Execution methods that should return result instead of object itself
     */
    protected array $methodThatShouldReturnQueryResults = [
        'get', 'find', 'first', 'all', 'insert', 'update', 'delete', "count"
    ];

    /**
     *  Raw sql query that are being generated by Builder class
     */
    protected string $rawSQL;

    /**
     *  Join tables 
     */
    protected array $joinTable = [];

    /**
     *  selected columns 
     */
    protected array $columns = ['*'];

    /**
     *  Distinct column or set of columns 
     */
    protected bool $distinct = false;

    /**
     *  where condition 
     */
    protected array $where = [];

    /**
     *  whereIn condition
     */
    protected array $whereIn = [];

    /**
     *  Where / orWhere / whereIn values that are being bind together
     */
    protected array $whereBindingValues = [];

    /**
     *  Sorting columns
     */
    protected array $orderBy = [];

    /**
     *  Group by columns
     */
    protected array $groupBy = [];

    /**
     *  Filter grouping result
     */
    protected array $having = [];

    /**
     *  Having values that are being bind together
     */
    protected array $havingBindingValues = [];

    /**
     *  limit the querying result
     */
    protected int $limit;

    /**
     *  Skip specific number of querying result
     */
    protected ?int $offset = null;

    /**
     *  Aggregates functions like count(), min(), max(), avg(), sum()
     */
    protected array $aggregates = [];





    /**
     *  Construct and initialize the default values
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function __construct(string $table, mysqli $conn, ?string $database = null)
    {
        $this->rawTable = $table;
        $this->table = $this->changeColumnFormat($table);
        $this->conn = $conn;
        $this->database = $database ?? $this->getCurrentDatabase();

        // define database to each object if no database define before
        if ($database != null){
            $this->conn->select_db($this->database);
        }
    }


    /**
     *  Join tables to use multiples flexible relationship 
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function join(string $table, ?string $primaryKey = null, ?string $foreignKey = null, string $type = "inner"): self
    {
        if (!in_array(strtolower($type), ['inner', 'left', 'right', 'cross'])){
            throw new BuilderException("Invalid join clause ($type)");
        }
        $type = strtoupper($type);
        $this->joinTable[] = [$table, $primaryKey, $foreignKey, $type];
        return $this;
    }


    /**
     *  Left Join tables to use multiples flexible relationship 
     */
    public function leftJoin(string $table, string $primaryKey, string $foreignKey): self
    {
        $this->join($table, $primaryKey, $foreignKey, "left");
        return $this;
    }


    /**
     *  Right Join tables to use multiples flexible relationship 
     */
    public function rightJoin(string $table, string $primaryKey, string $foreignKey): self
    {
        $this->join($table, $primaryKey, $foreignKey, "right");
        return $this;
    }


    /**
     *  Cross Join tables to use multiples flexible relationship 
     */
    public function crossJoin(string $table): self
    {
        $this->join($table, null, null, "cross");
        return $this;
    }


    /**
     *  Grouping query resuls 
     */
    public function groupBy(string ...$columns): self
    {
        $this->groupBy = $columns;
        return $this;
    }


    /**
     *  Apply aggregate functions as a columns and also alias them
     */
    public function selectAggregate(?string $count = null, ?string $sum = null, ?string $min = null, ?string $max = null, ?string $avg = null): self
    {
        $this->aggregates = compact("count", 'sum', 'min', 'max', 'avg');
        return $this;
    }


    /**
     *  Defining columns that are being fetched in query result
     *  @throws BuildQL\Database\Query\Exception\BuilderException 
     */
    public function select(array $columns = ['*']): self
    {
        if (empty($columns)){
            throw new BuilderException("Select method must be contain a proper non-empty array of columns name");
        }
        $this->columns = $columns;
        return $this;
    }


    /**
     *  Distinct result based on unqiue column or a group of columns values
     */
    public function distinct(): self
    {
        $this->distinct = true;
        return $this;
    }


    /**
     *  Apply a basic where condition in the query
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function where(string $column, $oper, $value = null, $boolean = "and"): self
    {
        if ($value == null && $oper == null){
            throw new BuilderException("Value must not be null in where() and orWhere() method");
        }
        $boolean = strtoupper($boolean);
        $this->where[] = $value ? [$column, $oper, $value, $boolean] : [$column, "=", $oper, $boolean];
        return $this;
    }


    /**
     *  Apply a basic orWhere condition in the query
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function orWhere(string $column, $oper, $value = null): self
    {
        $this->where($column, $oper, $value, "or");
        return $this;
    }


    /**
     *  Apply a basic whereIn condition where the column must contain the specific set of values
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function whereIn(string $column, array $values, $boolean = "and"): self
    {
        if (empty($values)){
            throw new BuilderException("\$values paramater must be a non-empty array");
        }
        $boolean = strtoupper($boolean);
        $whereNotIn = false;
        $this->whereIn[] = [$column, $values, $boolean, $whereNotIn];
        return $this;
    }


    /**
     *  Apply a basic orWhereIn condition where the column must contain the specific set of 
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function orWhereIn(string $column, array $values): self
    {   
        $whereNotIn = false;
        $this->whereIn($column, $values, "or", $whereNotIn);
        return $this;
    }
    

    /**
     *  Apply a basic whereNotIn condition where the column doesn't contain specific set of values
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function whereNotIn(string $column, array $values, $boolean = "and"): self
    {
        if (empty($values)){
            throw new BuilderException("\$values paramater must be a non-empty array");
        }
        $boolean = strtoupper($boolean);
        $whereNotIn = true;
        $this->whereIn[] = [$column, $values, $boolean, $whereNotIn];
        return $this;
    }
    

    /**
     *  Apply a basic orWhereNotIn condition where the column doesn't contain specific set of values in or case
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function orwhereNotIn(string $column, array $values): self
    {
        $this->whereNotIn($column, $values, "or", true);
        return $this;
    }


    /**
     *  Apply a basic where condition when the value is null in the query
     */
    public function whereNull(string $column, $boolean = "and"): self
    {
        $boolean = strtoupper($boolean);
        $this->where[] = [$column, "IS NULL", null, $boolean];
        return $this;
    }


    /**
     *  Apply a basic orWhere condition when the value is null in the query
     */
    public function orWhereNull(string $column): self
    {
        $this->whereNull($column, "or");
        return $this;
    }
    

    /**
     *  Apply a basic where condition when the value is not null in the query
     */
    public function whereNotNull(string $column, $boolean = "and"): self
    {
        $boolean = strtoupper($boolean);
        $this->where[] = [$column, "IS NOT NULL", null, $boolean];
        return $this;
    }
    

    /**
     *  Apply a basic orWhere condition when the value is not null in the query
     */
    public function orWhereNotNull(string $column): self
    {
        $this->whereNotNull($column, "or");
        return $this;
    }


    /**
     *  Filter grouping results
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function having(string $column, $oper, $value = null, $boolean = "and"): self
    {
        if ($value == null && $oper == null){
            throw new BuilderException("Value must not be null in having() and orHaving() method");
        }
        $boolean = strtoupper($boolean);
        $this->having[] = $value ? [$column, $oper, $value, $boolean] : [$column, "=", $oper, $boolean];
        return $this;
    }


    /**
     *  Filter grouping results
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function orHaving(string $column, $oper, $value = null): self
    {
        $this->having($column, $oper, $value, "or");
        return $this;
    }


    /**
     *  Order by (sorting) column into ASC or DESC;
     *  Note: if sort parameter is different from asc or desc then silently ignore it and perform ASC 
     */
    public function orderBy(string $column, string $sort = "ASC"): self
    {
        $sort = strtoupper($sort) == "DESC" ? "DESC" : "ASC";
        $this->orderBy[] = [$column, $sort];
        return $this;
    }


    /**
     *  Limiting querying results
     */
    public function limit(int $limit, ?int $offset = null): self
    {
        $this->limit = $limit;
        if ($offset != null){
            $this->offset = $offset;
        }
        return $this;
    }


    /**
     *  Skip specific number of rows in querying results
     */
    public function offset(int $offset): self
    {
        $this->offset = $offset;
        return $this;
    }


    /**
     *  Return the converted SQl query in raw / text format
     *  @return string - Converted Raw SQL Query
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function toRawSql(): string
    {
        $this->convertToSQL();
        return $this->rawSQL;
    }


    /**
     *  Get all data from query results
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function get(array $columns = ["*"]): array
    {
        $builder = clone $this;
        if ($columns != ['*']) $builder->select($columns);
        // convert SQL query
        $builder->convertToSQL(__FUNCTION__);
        return $builder->prepareAndExecuteQuery(__FUNCTION__);
    }
    
    
    /**
     *  Get all records from database table
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function all(): array
    {
        // convert SQL query
        $this->convertToSQL(__FUNCTION__);
        return $this->prepareAndExecuteQuery(__FUNCTION__);
    }


    /**
     *  Get single record (row) from the whole result
     *  @throws BuildQL\Database\Query\Exception\BuilderException
    */
    public function first(array $columns = ['*']): array
    {
        $data = (clone $this)->limit(1)->get($columns);
        return $data ? $data[0] : [];
    }
    

    /**
     *  Fetch record / data by id columns
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function find(int $id, array $columns = ['*']): array
    {
        $builder = clone $this;
        $builder->where = [];
        $builder->whereIn = [];

        $alias = stripos($this->rawTable, ":") !== false ? explode(":", $this->rawTable)[1] : null;
        $col = $alias ? $alias.".id" : $this->rawTable . ".id";
        return $builder->where($col, $id)->first($columns);
    }


    /**
     *  Insert data into the database table
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function insert(array $data): bool
    {
        // convert to raw SQl query
        $this->convertToSQL(__FUNCTION__, $data);
        return $this->prepareAndExecuteQuery(__FUNCTION__, $data);
    }


    /**
     *  Update the existing record from the database table
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function update(array $data): bool
    {
        // convert to raw SQl query
        $this->convertToSQL(__FUNCTION__, $data);
        return $this->prepareAndExecuteQuery(__FUNCTION__, $data);
    }


    /**
     *  Insert a new record or update the existing once based on condition
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function insertOrUpdate(array $data, array $where = []): bool
    {
        $builder = clone $this;
        $count = 0;
        if (!empty($where)){
            foreach ($where as $k => $w){
                if (is_array($w)){
                    $builder->whereIn($k, $w);
                }
                else{
                    $builder->where($k, $w);
                }
            }
            $count = $builder->count();
        }
        if ($count > 0){
            return $builder->update($data);
        }
        else{
            // to prevent unwanted binding in prepareAndExecuteQuery() in insertion case
            $builder->whereBindingValues = [];
            $builder->havingBindingValues = [];
            return $builder->insert($data);
        }
    }


    /**
     *  Delete record from the database
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function delete(): bool
    {
        // convert to raw SQl query
        $this->convertToSQL(__FUNCTION__);
        return $this->prepareAndExecuteQuery(__FUNCTION__);
    }


    /**
     *  Count the total numbers of records that are being fetched during query execution
     *  @throws BuildQL\Database\Query\Exception\BuilderException
     */
    public function count(): int
    {
        $builder = clone $this;
        return $builder->select(["count(*):count"])->first()["count"];
    }


    /**
     *  Get database name that are being currently used.
     */
    private function getCurrentDatabase(): ?string
    {
        $result = $this->conn->query("SELECT DATABASE() AS `db`");
        if ($result){
            return $result->fetch_assoc()['db'] ?? null;
        }
        return null;
    }
}


?>